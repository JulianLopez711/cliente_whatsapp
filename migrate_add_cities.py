#!/usr/bin/env python3
"""
Script de migraci√≥n para agregar las columnas origen_city y destino_city a la tabla trackings
"""

import os
import sys
from dotenv import load_dotenv
from sqlalchemy import create_engine, text

# Cargar variables del entorno
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    print("‚ùå Error: DATABASE_URL no est√° configurada en .env")
    sys.exit(1)

def agregar_columnas_tracking():
    """
    Agrega las columnas origen_city y destino_city a la tabla trackings
    """
    try:
        # Crear conexi√≥n
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as conn:
            print("üîó Conectado a la base de datos...")
            
            # Verificar si las columnas ya existen
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'trackings' 
                AND column_name IN ('origen_city', 'destino_city')
            """))
            
            columnas_existentes = [row[0] for row in result]
            print(f"üìã Columnas existentes: {columnas_existentes}")
            
            # Agregar origen_city si no existe
            if 'origen_city' not in columnas_existentes:
                print("‚ûï Agregando columna origen_city...")
                conn.execute(text("""
                    ALTER TABLE trackings 
                    ADD COLUMN origen_city VARCHAR(255)
                """))
                conn.commit()
                print("‚úÖ Columna origen_city agregada exitosamente")
            else:
                print("‚ÑπÔ∏è  Columna origen_city ya existe")
            
            # Agregar destino_city si no existe
            if 'destino_city' not in columnas_existentes:
                print("‚ûï Agregando columna destino_city...")
                conn.execute(text("""
                    ALTER TABLE trackings 
                    ADD COLUMN destino_city VARCHAR(255)
                """))
                conn.commit()
                print("‚úÖ Columna destino_city agregada exitosamente")
            else:
                print("‚ÑπÔ∏è  Columna destino_city ya existe")
            
            # Verificar que las columnas se agregaron correctamente
            result = conn.execute(text("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'trackings' 
                AND column_name IN ('origen_city', 'destino_city')
                ORDER BY column_name
            """))
            
            print("\nüìä Estado final de las columnas:")
            for row in result:
                column_name, data_type, is_nullable = row
                print(f"  ‚Ä¢ {column_name}: {data_type} (nullable: {is_nullable})")
                
        print("\nüéâ Migraci√≥n completada exitosamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la migraci√≥n: {e}")
        return False

def main():
    """
    Funci√≥n principal
    """
    print("üöÄ MIGRACI√ìN: Agregar columnas origen_city y destino_city")
    print("=" * 50)
    
    if agregar_columnas_tracking():
        print("\n‚úÖ La migraci√≥n se complet√≥ sin errores.")
        print("üîÑ Puedes reiniciar la aplicaci√≥n ahora.")
    else:
        print("\n‚ùå La migraci√≥n fall√≥.")
        print("üîç Revisa los errores anteriores y corrige el problema.")
    
    print("=" * 50)

if __name__ == "__main__":
    main()
